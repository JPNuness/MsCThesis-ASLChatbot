// THIS IS AN ASL SPECIFICATION EXAMPLE OF A PET CENTER

Package PetCenter

/******************************************************** 
   System definition  
*********************************************************/ 
System PET "PetCenter (Application Level)": Application [ isFinal
	description
"
This is a system that is used to manage a network of animal rescue centers.
A system user is any employee of the network, assigned with a role based on its function.

User-administrator shall be responsible for managing employees, configuring technical features (e.g., user roles, export configuration parameters, 
general enterprise information). System shall allow user-administrator to register employees. During this process the administrator shall specify 
first and last name of the employee and email address. Employee password shall be automatically generated by the system and sent to its email.

User-employee is responsible for managing customers and pets. These users are assigned to a pet center, and register pets that come in/go out.
For each pet, the system must maintain information of its name, species, breed, sex, age and entry date. An exit date must also be registered
when a pet leaves the center, and the pet must be assigned to an owner (the customer).

User-customers are registered by the User-employees and must be recorded in the system with their first and last names, e-mail, phone number and address.
These users can browse the pet list and, upon adopting a pet, are assigned to it as owners. 
"]

/********************************************************
	DataEntities view
*********************************************************/

DataEnumeration PetSpecies values (dog "Dog", cat "Cat")
DataEnumeration AnimalSex values (M "Male", F "Female")

DataEntity e_Center "Pet Center" : Master [
	attribute ID : Integer [constraints (PrimaryKey)]
	attribute Address : String(100) [constraints (NotNull Unique)]
	description "Pet Centers"
]

DataEntity e_Customer "Customer" : Master [ 
	attribute ID : Integer [constraints (PrimaryKey)]
	attribute Name : String(50) [constraints (NotNull)]
	attribute email : Email [constraints (NotNull Unique)]
	attribute phone "Phone Number" : Integer(9) [constraints (Unique)]
	attribute Address : String(100) [constraints (NotNull Unique)]
	attribute image "Photo" : Image [constraints (Encrypted)]
	description "Customers"
]

DataEntity e_Pet "Pet" : Master [
	attribute ID : Integer [constraints (PrimaryKey)]
	attribute CenterCode : Integer [constraints (NotNull ForeignKey (e_Center))]
	attribute Name : String(50) [constraints (NotNull)]
	attribute Species : DataEnumeration PetSpecies [constraints (NotNull)]
	attribute Breed : String(50) // Might be unknown, not mandatory
	attribute Sex : DataEnumeration AnimalSex [constraints (NotNull)]
	attribute Age : Integer // Might be unknown, not mandatory
	attribute Center "Current pet center" : String(100) [constraints (NotNull Derived (e_Center.Address) )]
	attribute EntryDate "Entry date on the center" : Date [constraints (NotNull)]
	attribute Owner "Adopter" : Integer [constraints (NotNull ForeignKey (e_Customer))]
	attribute LeaveDate "Adoption date" : Date [constraints (Check (emptyOwner "e_Pet.Owner is not empty"))]
	description "Pets"
]

DataEntity e_OwnershipCertificate: Document: Regular [
	attribute ID : Integer [constraints (PrimaryKey)]
	attribute Pet : Integer [constraints (NotNull ForeignKey (e_Pet onDelete PROTECT))] // Do not delete certificates
	attribute Owner : Integer [constraints (NotNull ForeignKey (e_Customer onDelete PROTECT))] // Do not delete certificates
	attribute creationDate : Date [constraints (NotNull Derived (e_Pet.LeaveDate) )]
	attribute ownerName : String [constraints (NotNull Derived (e_Customer.Name) )]
]

DataEntity e_Employee "User" : Master [
	attribute ID "ID" : Integer [constraints (PrimaryKey)]
	attribute CenterCode : Integer [constraints (NotNull ForeignKey (e_Center))]
	attribute password "Password" : Regex [constraints (NotNull Encrypted)]
	attribute firstName "First Name" : String [constraints (NotNull Encrypted)]
	attribute lastName "Last Name" : String [constraints (NotNull Encrypted)]
	attribute email "Email" : Email [constraints (Unique Encrypted)]
	attribute active "IsActive" : Boolean
	attribute admin "isAdmin" : Boolean
	description "Employees"
]

/********************************************************
	DataEntityCluster view
*********************************************************/

DataEntityCluster ec_Center "Pet Centers" : Master [main e_Center]
DataEntityCluster ec_Customer "Customers" : Master [main e_Customer]
DataEntityCluster ec_Pet "Pets" : Master [main e_Pet uses e_Center, e_Customer]
DataEntityCluster ec_OwnershipCertificates "Ownership Certificates" : Document [
	main e_OwnershipCertificate
	uses e_Customer, e_Pet
]
DataEntityCluster ec_Employee "Employees" : Master [main e_Employee uses e_Center]

/********************************************************
   ActionTypes 
*********************************************************/ 

 // Default Actions
ActionType aClose [description "Close the current Interaction Space (Form, Windows, Dialog, etc.)"]
ActionType aCancel [description "Cancel the current Interaction Space (Form, Windows, Dialog, etc.)"]
ActionType aConfirm [description "Confirm the current Interaction Space (Form, Windows, Dialog, etc.)"]
ActionType aSearch [description "Define a set of DataEntity items from a search query"]
ActionType aFilter [description "Define a set of DataEntity items from a logical filter query"]

// Specific Actions
ActionType aPrint_Pet [description "Print a pet's profile"]
ActionType aPrint_Customer [description "Print a customer's profile"]
ActionType aPrint_Employee [description "Print an employee's profile"]
ActionType aPrint_Certificate [description "Print a pet's ownership certificate"]
ActionType aList_Pets [description "Print a selected list of Pets according a previously defined template"]
ActionType aConfirmAdoption [description "Assign a customer to a pet"]

/********************************************************
   Actors 
*********************************************************/ 
 
Actor a_Admin "System Admin" : User [description "Manage Employees"]
Actor a_Employee "Manager" : User [description "Register Customers and pets in its center"]
Actor a_Customer "Customer" : User [ description "Browse and adopt pets"]
Actor a_PET "System" : ExternalSystem [description "Receive info of adopted pets"]

/********************************************************
   UseCases 
*********************************************************/ 
// PETS
UseCase uc_1_ManagePets "Manage Pets" : EntitiesManage [ 
	actorInitiates a_Employee   
//  primaryActor a_Employee  
	dataEntity ec_Pet
	actions aCreate, aRead, aUpdate, aDelete, aSearch, aFilter, aClose
	extensionPoints xp_RegisterPet, xp_UpdatePet, xp_Print_Pet, xp_Register_Adoption, xp_Browse_Pets
]

UseCase uc_1_1_RegisterPet "Register Pet" : EntityCreate [
	actorInitiates a_Employee
	//  primaryActor a_Employee 
	dataEntity ec_Pet 
	actions aConfirm, aCancel
	extends uc_1_ManagePets onExtensionPoint xp_RegisterPet
]

UseCase uc_1_2_UpdatePet "Update Pet information" : EntityUpdate [
	actorInitiates a_Employee
	//  primaryActor a_Employee 
	dataEntity ec_Pet
	actions aConfirm, aCancel
	extensionPoints xp_Register_Adoption
	extends uc_1_ManagePets onExtensionPoint xp_UpdatePet
	description "Update Pet information, including registering it as adopted"
]

UseCase uc_1_3_PrintPet "Print Pet information" : EntityReport [
	actorInitiates a_Employee
//	primaryActor a_Employee
	dataEntity ec_Pet
	actions aPrint_Pet, aClose
	extends uc_1_ManagePets onExtensionPoint xp_Print_Pet
	extends uc_1_5_Browse_Pets_Employee onExtensionPoint xp_Print_Pet
]

UseCase uc_1_4_Register_Adoption "Register Pet adoption" : EntityUpdate [
	actorInitiates a_Employee
//	primaryActor a_Employee
	dataEntity ec_Pet
	actions aConfirmAdoption, aCancel
	extensionPoints xp_CreateCustomer
	extends uc_1_ManagePets onExtensionPoint xp_Register_Adoption
	extends uc_1_2_UpdatePet onExtensionPoint xp_Register_Adoption
]

UseCase uc_1_5_Browse_Pets_Employee "Browse available pets" : EntitiesBrowse [
	actorInitiates a_Employee
//	primaryActor a_Employee
	dataEntity ec_Pet
	precondition "e_Pet.CodeCenter == e_Employee.CodeCenter"
	actions aList_Pets, aSearch, aFilter, aPrint_Pet, aClose
	extensionPoints xp_Print_Pet
	extends uc_1_ManagePets onExtensionPoint xp_Register_Adoption
	extends uc_1_2_UpdatePet onExtensionPoint xp_Register_Adoption
]

// CUSTOMERS
UseCase uc_2_ManageCustomers "Manage Customers" : EntitiesManage [  
	actorInitiates a_Employee
//  primaryActor a_Employee 
	dataEntity ec_Customer
	actions aCreate, aRead, aUpdate, aDelete, aSearch, aFilter, aClose
	extensionPoints xp_Create_Customer, xp_Print_Customer
]

UseCase uc_2_1_CreateCustomer "Create Customer" : EntityCreate [
	actorInitiates a_Employee
//	primaryActor a_Employee
	dataEntity ec_Customer
	actions aConfirm, aCancel 
	extends uc_1_4_Register_Adoption onExtensionPoint xp_CreateCustomer
	extends uc_2_ManageCustomers onExtensionPoint xp_Create_Customer
	description "Create Customer"
]

UseCase uc_2_2_PrintCustomer "Print Customer Report" : EntityReport [
	actorInitiates a_Employee
//  primaryActor a_Employee 
	dataEntity ec_Customer 
	actions aPrint_Customer, aClose
	extends uc_2_ManageCustomers onExtensionPoint xp_Print_Customer
]

UseCase uc_3_Browse_Pets_Customer "Browse available pets (for customers)" : EntitiesBrowse [ 
	actorInitiates a_Customer
//  primaryActor a_Customer
	dataEntity ec_Pet
	actions aList_Pets, aSearch, aFilter, aClose
]

UseCase uc_4_Browse_Ownership_Certificates "Browse ownership certificates" : EntitiesBrowse [ 
	actorInitiates a_Customer
//  primaryActor a_Customer
	dataEntity ec_OwnershipCertificates
	precondition "e_OwnershipCertificate.Owner == e_Customer.ID"
	actions aSearch, aFilter, aClose
	extensionPoints xp_Print_Certificate
]

UseCase uc_4_1_Print_Ownership_Certificate "Print ownership certificates" : EntitiesBrowse [ 
	actorInitiates a_Customer
//  primaryActor a_Customer
	dataEntity ec_OwnershipCertificates
	actions aPrint_Certificate, aCancel
	extends uc_4_Browse_Ownership_Certificates onExtensionPoint xp_Print_Certificate
]

// EMPLOYEES
UseCase uc_5_ManageEmployees "Manage Employees" : EntitiesManage [  
	actorInitiates a_Employee
//  primaryActor a_Employee 
	dataEntity ec_Employee
	precondition "e_Employee.isAdmin"
	actions aCreate, aRead, aUpdate, aDelete, aSearch, aFilter, aClose
	extensionPoints xp_Create_Employee, xp_Print_Employee
]

UseCase uc_5_1_CreateEmployee "Create Employee" : EntityCreate [
	actorInitiates a_Employee
//	primaryActor a_Employee
	dataEntity ec_Employee
	actions aConfirm, aCancel
	extends uc_5_ManageEmployees onExtensionPoint xp_Create_Employee
]

UseCase uc_5_2_PrintEmployee "Print Employee Report" : EntityReport [
	actorInitiates a_Employee
//  primaryActor a_Employee 
	dataEntity ec_Employee 
	actions aPrint_Employee, aClose
	extends uc_5_ManageEmployees onExtensionPoint xp_Print_Employee
]